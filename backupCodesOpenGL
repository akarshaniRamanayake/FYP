import torch
from PyQt5 import QtCore  # core Qt functionality
from PyQt5 import QtGui  # extends QtCore with GUI functionality
from PyQt5 import QtOpenGL  # provides QGLWidget, a special OpenGL QWidget
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QPushButton

from PyQt5.QtCore import pyqtSignal
import OpenGL.GL as gl  # python wrapping of OpenGL
from OpenGL import GLU  # OpenGL Utility Library, extends OpenGL functionality
from OpenGL.arrays import vbo

import numpy as np
import sys

from lidarDataLoader import Lidar
from dataPreProcessor import preProcess, loadData
from trainers import Trainer

class GLWidget(QtOpenGL.QGLWidget):
    updateScene = pyqtSignal(str)
    updateGLWindow = pyqtSignal(str)

    def __init__(self, parent=None):
        self.parent = parent
        QtOpenGL.QGLWidget.__init__(self, parent)
        self.pointCoordinates = []
        self.updateScene.connect(self.update)
        self.updateGLWindow.connect(self.updateGL)
        self.pointCloud = np.empty((0, 3), dtype=np.float32)
        self.colors = np.empty((0, 3), dtype=np.float32)
        self.zoomFactor = 1.0

    def wheelEvent(self, event):
        delta = event.angleDelta().y()
        if delta > 0:
            self.zoomIn()
        else:
            self.zoomOut()

    def zoomIn(self):
        self.zoomFactor *= 0.8
        self.updateGL()

    def zoomOut(self):
        self.zoomFactor *= 1.2
        self.updateGL()

    def run(self):
        lidar = Lidar(self)
        lidar.load()

    def update(self):
        completed_dataset = preProcess(self.pointCoordinates)
        train_loader, test_loader = loadData(completed_dataset)
        model = Trainer(train_loader, test_loader)
        self.load_pointcloud(model, completed_dataset)
        self.show()
        print("dataset details")
        print("dataset details", len(completed_dataset))
        #print("obstacle details", len(obstacle_points))
        # print("positive", positive_points)
        # print("negative", negative_points)
        # print("dataset", completed_dataset)
        print("-------------------------------------------------------------------------------")
        print("-------------------------------------------------------------------------------")
        print("-------------------------------------------------------------------------------")
        print("-------------------------------------------------------------------------------")

        print("kk")

    def load_pointcloud(self, model, completed_dataset):
        # points = np.empty((0, 3), dtype=np.float32)
        # colors = np.empty((0, 3), dtype=np.float32)
        #
        # for i in completed_dataset:
        #     distance, confidence = self.sdf_function(model, i[0], i[1], i[2])
        #     if distance <= 0:
        #         pnt = np.array([i[0], i[1], i[2]], dtype=np.float32)
        #         self.pointCloud = np.vstack((self.pointCloud, pnt))
        #         self.colors = np.vstack((self.colors, [0.7, 0.5, 0.4]))

        #print("///////////////////////////////////lidar points//////////////",points)
        points = np.random.rand(1000, 3) * 10
        colors = np.random.rand(1000, 3)
        self.pointCloud = points
        self.colors = colors
        print("size to gl: ",len(self.pointCloud))
        print("max to gl: ", np.max(self.pointCloud))
        print("min to gl: ", np.min(self.pointCloud))


        print("////////////////////////////////random points///////////////",self.pointCloud)

        self.updateGLWindow.emit("Updated GL Window.")
        # return points, colors

    def sdf_function(self, model,x, y, z):
        input_tensor = torch.tensor([x, y, z], dtype=torch.float32)
        with torch.no_grad():
            return model(input_tensor).detach().numpy()

    def initializeGL(self):
        self.qglClearColor(QtGui.QColor(250, 250, 250))  # initialize the screen to blue
        gl.glEnable(gl.GL_DEPTH_TEST)  # enable depth testing
        gl.glPointSize(10)

        self.initGeometryPC()

        self.rotX = 0.0
        self.rotY = 0.0
        self.rotZ = 0.0

    def setRotX(self, val):
        self.rotX = val

    def setRotY(self, val):
        self.rotY = val

    def setRotZ(self, val):
        self.rotZ = val

    def resizeGL(self, width, height):
        gl.glViewport(0, 0, width, height)
        gl.glMatrixMode(gl.GL_PROJECTION)
        gl.glLoadIdentity()
        aspect = width / float(height)

        # GLU.gluPerspective(45.0, aspect, 1.0, 100.0)   #GLU.gluPerspective(45.0, aspect, 1.0, 100.0)
        gl.glOrtho(-2000.0, 2000.0, -2000.0, 2000.0, 1.0, 5000.0)

        gl.glMatrixMode(gl.GL_MODELVIEW)

    def paintGL(self):
        center = np.mean(self.pointCloud, axis=0)
        gl.glClear(gl.GL_COLOR_BUFFER_BIT | gl.GL_DEPTH_BUFFER_BIT)

        gl.glPushMatrix()  # push the current matrix to the current stack

        gl.glTranslate(0.0, 0.0, -5.0)  # third, translate cube to specified depth
        # gl.glScale(.5, .5, .5)                 # second, scale point cloud
        gl.glRotate(self.rotX, 1.0, 0.0, 0.0)
        gl.glRotate(self.rotY, 0.0, 1.0, 0.0)
        gl.glRotate(self.rotZ, 0.0, 0.0, 1.0)
        gl.glTranslate(-0.5, -0.5, -0.5)  # first, translate point cloud center to origin
        #gl.glTranslatef(-center[0], -center[1], -center[2])

        gl.glEnableClientState(gl.GL_VERTEX_ARRAY)
        gl.glEnableClientState(gl.GL_COLOR_ARRAY)

        gl.glVertexPointer(3, gl.GL_FLOAT, 0, self.vertVBO)
        gl.glColorPointer(3, gl.GL_FLOAT, 0, self.colorVBO)

        gl.glPointSize(20)
        gl.glDrawElements(gl.GL_POINTS, len(self.pointsIdxArray), gl.GL_UNSIGNED_INT, self.pointsIdxArray)

        gl.glDisableClientState(gl.GL_VERTEX_ARRAY)
        gl.glDisableClientState(gl.GL_COLOR_ARRAY)

        gl.glPopMatrix()  # restore the previ

    def initGeometryPC(self):
        points = self.pointCloud
        colors = self.colors

        # Reshape the vertex and color arrays
        self.pointsVtxArray = points
        self.vertVBO = vbo.VBO(points.astype(np.float32))
        self.vertVBO.bind()

        self.pointsClrArray = colors
        self.colorVBO = vbo.VBO(colors.astype(np.float32))
        self.colorVBO.bind()

        self.pointsIdxArray = np.arange(len(points))

    # def initGeometryPC(self):
    #     points = self.pointCloud
    #     colors = self.colors
    #
    #     self.pointsVtxArray = points
    #     self.vertVBO = vbo.VBO(np.reshape(self.pointsVtxArray, (1, -1)).astype(np.float32))
    #     self.vertVBO.bind()
    #
    #     self.pointsClrArray = colors
    #     self.colorVBO = vbo.VBO(np.reshape(self.pointsClrArray, (1, -1)).astype(np.float32))
    #     self.colorVBO.bind()
    #     self.pointsIdxArray = np.arange(len(points))


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    win = GLWidget()
    win.run()
    sys.exit(app.exec_())